return {
	"folke/which-key.nvim",
	event = "VeryLazy",
	opts = {
		---@type false | "classic" | "modern" | "helix"
		preset = "modern",
	},
	keys = {
		{
			"<leader>",
			function()
				require("which-key").show({ global = false })
			end,
			desc = "Buffer Local Keymaps (which-key)",
		},
	},
	-- opts = {
	-- 	plugins = {
	-- 		marks = true, -- shows a list of your marks on ' and `
	-- 		registers = true, -- shows your registers on " in NORMAL or <C-r> in INSERT mode
	-- 		-- the presets plugin, adds help for a bunch of default keybindings in Neovim
	-- 		-- No actual key bindings are created
	-- 		spelling = {
	-- 			enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
	-- 			suggestions = 20, -- how many suggestions should be shown in the list?
	-- 		},
	-- 		presets = {
	-- 			operators = true, -- adds help for operators like d, y, ...
	-- 			-- motions = true, -- adds help for motions
	-- 			text_objects = true, -- help for text objects triggered after entering an operator
	-- 			windows = true, -- default bindings on <c-w>
	-- 			nav = true, -- misc bindings to work with windows
	-- 			z = true, -- bindings for folds, spelling and others prefixed with z
	-- 			g = true, -- bindings for prefixed with g
	-- 		},
	-- 	},
	-- 	-- add operators that will trigger motion and text object completion
	-- 	-- to enable all native operators, set the preset / operators plugin above
	-- 	operators = { gc = "Comments" },
	-- 	key_labels = {
	-- 		-- override the label used to display some keys. It doesn't effect WK in any other way.
	-- 		-- For example:
	-- 		-- ["<space>"] = "SPC",
	-- 		-- ["<cr>"] = "RET",
	-- 		-- ["<tab>"] = "TAB",
	-- 	},
	-- 	motions = {
	-- 		count = true,
	-- 	},
	-- 	icons = {
	-- 		breadcrumb = "»", -- symbol used in the command line area that shows your active key combo
	-- 		separator = "➜", -- symbol used between a key and it's label
	-- 		group = "+", -- symbol prepended to a group
	-- 	},
	-- 	popup_mappings = {
	-- 		scroll_down = "<c-d>", -- binding to scroll down inside the popup
	-- 		scroll_up = "<c-u>", -- binding to scroll up inside the popup
	-- 	},
	-- 	window = {
	-- 		border = "none", -- none, single, double, shadow
	-- 		position = "bottom", -- bottom, top
	-- 		margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]. When between 0 and 1, will be treated as a percentage of the screen size.
	-- 		padding = { 1, 2, 1, 2 }, -- extra window padding [top, right, bottom, left]
	-- 		winblend = 0, -- value between 0-100 0 for fully opaque and 100 for fully transparent
	-- 		zindex = 1000, -- positive value to position WhichKey above other floating windows.
	-- 	},
	-- 	layout = {
	-- 		height = { min = 4, max = 25 }, -- min and max height of the columns
	-- 		width = { min = 20, max = 50 }, -- min and max width of the columns
	-- 		spacing = 3, -- spacing between columns
	-- 		align = "center", -- align columns left, center or right
	-- 	},
	-- 	ignore_missing = false, -- enable this to hide mappings for which you didn't specify a label
	-- 	-- hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "^:", "^ ", "^call ", "^lua " }, -- hide mapping boilerplate
	-- 	show_help = true, -- show a help message in the command line for using WhichKey
	-- 	show_keys = true, -- show the currently pressed key and its label as a message in the command line
	-- 	triggers = "auto", -- automatically setup triggers
	-- 	-- triggers = {"<leader>"} -- or specifiy a list manually
	-- 	-- list of triggers, where WhichKey should not wait for timeoutlen and show immediately
	-- 	triggers_nowait = {
	-- 		-- marks
	-- 		"`",
	-- 		"'",
	-- 		"g`",
	-- 		"g'",
	-- 		-- registers
	-- 		'"',
	-- 		"<c-r>",
	-- 		-- spelling
	-- 		"z=",
	-- 	},
	-- 	triggers_blacklist = {
	-- 		-- list of mode / prefixes that should never be hooked by WhichKey
	-- 		-- this is mostly relevant for keymaps that start with a native binding
	-- 		i = { "j", "k" },
	-- 		v = { "j", "k" },
	-- 	},
	-- 	-- disable the WhichKey popup for certain buf types and file types.
	-- 	-- Disabled by default for Telescope
	-- 	disable = {
	-- 		buftypes = {},
	-- 		filetypes = {},
	-- 	},
	-- },
	--
	-- config = function(_, opts)
	-- 	local which_key = require("which-key")
	-- 	local wkmappings = {
	-- 		{ "<leader>c", group = "CodeAction", nowait = true, remap = false },
	-- 		{ "<leader>cc", "<leader>cc", desc = "Toggle Comment line", nowait = true, remap = false },
	-- 		{ "<leader>g", group = "Git", nowait = true, remap = false },
	-- 		{
	-- 			"<leader>gB",
	-- 			":Gitsigns toggle_current_line_blame<cr>",
	-- 			desc = "Current Line Blame",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gL",
	-- 			":Gitsigns toggle_linehl<cr>",
	-- 			desc = "Toggle LineHL",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gN",
	-- 			":Gitsigns toggle_numhl<cr>",
	-- 			desc = "Toggle NumHL",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gR",
	-- 			":Gitsigns reset_buffer<cr>",
	-- 			desc = "Reset Buffer",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gS",
	-- 			":Gitsigns toggle_signs<cr>",
	-- 			desc = "Toggle Signs",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gW",
	-- 			":Gitsigns toggle_word_diff<cr>",
	-- 			desc = "Toggle Word Diff",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gb",
	-- 			"<cmd>Telescope git_branches<cr>",
	-- 			desc = "Checkout branch",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gc",
	-- 			"<cmd>Telescope git_commits<cr>",
	-- 			desc = "Checkout commit",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gd",
	-- 			":Gitsigns diffthis HEAD<cr>",
	-- 			desc = "Diff",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gj",
	-- 			":Gitsigns next_hunk<CR>",
	-- 			desc = "Next Hunk",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gk",
	-- 			":Gitsigns prev_hunk<CR>",
	-- 			desc = "Prev Hunk",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gl",
	-- 			":Gitsigns blame_line<cr>",
	-- 			desc = "Blame",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>go",
	-- 			"<cmd>Telescope git_status<cr>",
	-- 			desc = "Open changed file",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gp",
	-- 			":Gitsigns preview_hunk<cr>",
	-- 			desc = "Preview Hunk",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gr",
	-- 			":Gitsigns reset_hunk<cr>",
	-- 			desc = "Reset Hunk",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gs",
	-- 			":Gitsigns stage_hunk<cr>",
	-- 			desc = "Stage Hunk",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>gu",
	-- 			":Gitsigns undo_stage_hunk<cr>",
	-- 			desc = "Undo Stage Hunk",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{ "<leader>s", group = "Search", nowait = true, remap = false },
	-- 		{
	-- 			"<leader>sc",
	-- 			"<cmd>Telescope colorscheme<cr>",
	-- 			desc = "Colorscheme",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>sk",
	-- 			"<cmd>Telescope keymaps<cr>",
	-- 			desc = "Keymaps",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 		{
	-- 			"<leader>sr",
	-- 			"<cmd>Telescope oldfiles<cr>",
	-- 			desc = "Open Recent File",
	-- 			nowait = true,
	-- 			remap = false,
	-- 		},
	-- 	}
	--
	-- 	which_key.setup(opts)
	-- 	which_key.register(wkmappings, {
	-- 		-- which_key.register({
	-- 		mode = "n", -- NORMAL mode
	-- 		prefix = "<leader>",
	-- 		buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings
	-- 		silent = true, -- use `silent` when creating keymaps
	-- 		noremap = true, -- use `noremap` when creating keymaps
	-- 		nowait = true, -- use `nowait` when creating keymaps
	-- 	})
	-- end,
}
